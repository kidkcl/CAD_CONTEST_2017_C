!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
MYCLK_TCK	myUsage.h	21;"	d
MYCLK_TCK	myUsage.h	22;"	d
MY_USAGE_H	myUsage.h	10;"	d
MyUsage	myUsage.h	/^   MyUsage() { reset(); }$/;"	f	class:MyUsage
MyUsage	myUsage.h	/^class MyUsage$/;"	c
UTIL_BOOL3V_H_	bool3v.h	9;"	d
UTIL_PARSE_H_	parse.h	9;"	d
UTIL_UNATE_H_	unate.h	9;"	d
Unateness	unate.h	/^  Unateness(): val_(0) {}$/;"	f	class:Unateness
Unateness	unate.h	/^  Unateness(const Unateness& u) { val_ = u.val_; }$/;"	f	class:Unateness
Unateness	unate.h	/^  explicit Unateness(unsigned u): val_(u) {}$/;"	f	class:Unateness
Unateness	unate.h	/^class Unateness{$/;"	c
_currentMem	myUsage.h	/^   double     _currentMem;$/;"	m	class:MyUsage
_currentTick	myUsage.h	/^   double     _currentTick;$/;"	m	class:MyUsage
_initMem	myUsage.h	/^   double     _initMem;$/;"	m	class:MyUsage
_periodUsedTime	myUsage.h	/^   double     _periodUsedTime;$/;"	m	class:MyUsage
_totalUsedTime	myUsage.h	/^   double     _totalUsedTime;$/;"	m	class:MyUsage
addNeg	unate.h	/^  void addNeg() { val_ |= 2; }$/;"	f	class:Unateness
addPos	unate.h	/^  void addPos() { val_ |= 1; }$/;"	f	class:Unateness
bool_3v	bool3v.h	/^  bool_3v()                     : value(0) {}$/;"	f	class:bool_3v
bool_3v	bool3v.h	/^  explicit bool_3v(bool x)      : value(x) {}$/;"	f	class:bool_3v
bool_3v	bool3v.h	/^  explicit bool_3v(unsigned v)  : value(v) {}$/;"	f	class:bool_3v
bool_3v	bool3v.h	/^class bool_3v {$/;"	c
checkMem	myUsage.h	/^   double checkMem() const {$/;"	f	class:MyUsage
checkTick	myUsage.h	/^   double checkTick() const {$/;"	f	class:MyUsage
getVal	unate.h	/^  unsigned getVal() const { return val_; }$/;"	f	class:Unateness
isBinate	unate.h	/^  bool isBinate() const { return val_ == 3; }$/;"	f	class:Unateness
isNeg	unate.h	/^  bool isNeg()    const { return val_ == 2; }$/;"	f	class:Unateness
isNull	unate.h	/^  bool isNull()   const { return val_ == 0; }$/;"	f	class:Unateness
isPos	unate.h	/^  bool isPos()    const { return val_ == 1; }$/;"	f	class:Unateness
isUnate	unate.h	/^  bool isUnate()  const { return isPos() || isNeg(); }$/;"	f	class:Unateness
myToString	parse.cpp	/^std::string myToString(unsigned n) {$/;"	f
operator !	bool3v.h	/^  bool_3v operator !() const {$/;"	f	class:bool_3v
operator !=	bool3v.h	/^  bool operator != (bool_3v b) const { return !(*this == b); }$/;"	f	class:bool_3v
operator !=	unate.h	/^  bool operator != (const Unateness& u) const { return val_ != u.val_; }$/;"	f	class:Unateness
operator &&	bool3v.h	/^  bool_3v operator && (bool_3v b) const {$/;"	f	class:bool_3v
operator =	unate.h	/^  Unateness& operator = (const Unateness& u) { val_ = u.val_; return (*this); }$/;"	f	class:Unateness
operator ==	bool3v.h	/^  bool operator == (bool_3v b) const {$/;"	f	class:bool_3v
operator ==	unate.h	/^  bool operator == (const Unateness& u) const { return val_ == u.val_; }$/;"	f	class:Unateness
operator ^	bool3v.h	/^  bool_3v operator ^ (bool_3v b) const {$/;"	f	class:bool_3v
operator |	unate.h	/^  Unateness operator | (Unateness u) { return Unateness(val_ | u.val_); }$/;"	f	class:Unateness
operator ||	bool3v.h	/^  bool_3v operator || (bool_3v b) const {$/;"	f	class:bool_3v
operator ~	unate.h	/^  Unateness operator ~() { return Unateness((0xd8 >> (val_ << 1)) & 3); }$/;"	f	class:Unateness
readUntil	parse.cpp	/^std::string readUntil(std::ifstream& ifs, char end) {$/;"	f
report	myUsage.h	/^   void report(bool repTime, bool repMem) {$/;"	f	class:MyUsage
reset	myUsage.h	/^   void reset() {$/;"	f	class:MyUsage
setMemUsage	myUsage.h	/^   void setMemUsage() { _currentMem = checkMem() - _initMem; }$/;"	f	class:MyUsage
setTimeUsage	myUsage.h	/^   void setTimeUsage() {$/;"	f	class:MyUsage
split	parse.cpp	/^std::vector<std::string> split(const std::string& str, const std::string& sep) {$/;"	f
str2Int	parse.cpp	/^bool str2Int(const std::string& str, int& num) {$/;"	f
val_	unate.h	/^  unsigned val_;$/;"	m	class:Unateness
value	bool3v.h	/^  unsigned value;$/;"	m	class:bool_3v
~Unateness	unate.h	/^  ~Unateness() {}$/;"	f	class:Unateness
